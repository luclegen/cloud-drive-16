openapi: 3.0.3
info:
  title: CloudDrive16 API
  description: |-
    This project was used to build CloudDrive16 web (A file hosting service and synchronization service operated by CloudTeam16)
  termsOfService: http://swagger.io/terms/
  contact:
    email: luclegen.info@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:5000/api
tags:
  - name: users
    description: Users
  - name: auth
    description: Authentication
  - name: codes
    description: Codes
  - name: folders
    description: Folders
  - name: files
    description: Files
  - name: public
    description: Public files
  - name: private
    description: Private files
  - name: pet
    description: Everything about your Pets
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: store
    description: Access to Petstore orders
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io
  - name: user
    description: Operations about user
paths:
  /users:
    post:
      tags:
        - users
      summary: Create user
      description: Create a new user
      operationId: createUser
      requestBody:
        description: Create a new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '201':
          description: "Registered successfully."
        '400':
          description: "1. Invalid email;\n2. Invalid language.|\nPlease choose a stronger password. Try a mix of letters, numbers, and symbols (use 8 or more characters)."
        '403':
          description: "Invalid birthday."
        '404':
          description: "User not found.|Profile not found."
        '422':
          description: "Email is taken!"
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    get:
      tags:
        - users
      summary: Read user
      description: Read an user 
      operationId: readUser
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  avatar:
                    type: string
                    example: "/651a460623dbbafbf21fdb71/1696237372253.jpg"
                  name:
                    type: object
                    properties:
                      first:
                        type: string
                        example: "Lực"
                      middle:
                        type: string
                        example: "Tấn"
                      last:
                        type: string
                        example: "Huỳnh"
                  lang: 
                    type: string
                    default: en
                    enum:
                      - en
                      - vi
                    example: vi
                  email:
                    type: string
                    example: "luclegen.dev@gmail.com"
                  full_name:
                    type: string
                    example: "Huỳnh Tấn Lực"
                  birthday:
                    type: string
                    example: "1997-10-28T17:00:00.000Z"
                  sex:
                    type: string
                    default: Male
                    enum:
                      - Male
                      - Female
                      - Other
        '404':
          description: "Profile not found."
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    put:
      tags:
        - users
      summary: Update user
      description: Update user
      operationId: updateUser
      requestBody:
        description: Update user in CloudDrive16
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdatedUser'
        required: true
      responses:
        '200':
          description: "Updated successfully."
        '403':
          description: "Cannot execute \"update\" on \"User\".|Cannot execute \"read\" on \"Profile\".|Cannot execute \"update\" on \"Profile\"."
        '404':
          description: "User not found.|Profile not found."
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    patch:
      tags:
        - users
      summary: Change language
      description: Change language of user
      operationId: changeLang
      requestBody:
        description: Change lang
        content:
          text/plain:
            schema:
              type: string
              example: en|vi
      responses:
        '200':
          description: "Change language successfully."
        '400':
          description: "1. Invalid language."
        '403':
          description: "Cannot execute \"read\" on \"User\".|Cannot execute \"changeLang\" on \"User\""
        '404':
          description: "User not found."
  /auth:
    post:
      tags:
        - auth
      summary: Login
      description: Login to CloudDrive16
      operationId: login
      requestBody:
        description: Login to CloudDrive16
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auth'
        required: true
      responses:
        '200':
          description: Login successfully.
        '400':
          description: "Invalid email."
        '401':
          description: "Wrong password."
        '404':
          description: "Username not registered."
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    put:
      tags:
        - auth
      summary: Verify email
      description: Verify email
      operationId: verify
      requestBody:
        description: Verify email in CloudDrive16
        content:
          text/plain:
            schema:
              type: string
              example: 123456
        required: true
      responses:
        '200':
          description: Successful operation
        '403':
          description: "User verified.|Cannot execute \"read\" on \"User\".|Cannot execute \"read\" on \"Code\".|Cannot execute \"verify\" on \"Code\".|Wrong code.\nYou have 2 attempts left.|Wrong code.\nYou have 1 attempts left.|You tried too many. Please try again with a different verification code or change your email again."
        '404':
          description: "User not found.|Code not found.\nPlease click to \"Send Code\".|Code not found."
        '429':
          description: "You tried too many. Please try again with a different verification code or change your email again."
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    patch:
      tags:
        - auth
      summary: Change password
      description: Change password of user.
      operationId: changePassword
      requestBody:
        description: Change password.
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: Luc123!@#
                new_password:
                  type: string
                  example: Legen321#@!
      responses:
        '200':
          description: "Change password successfully."
        '400':
          description: "Please choose a new stronger password. Try a mix of letters, numbers, and symbols (use 8 or more characters)."
        '401':
          description: "Wrong password."
        '403':
          description: "Cannot execute \"changePassword\" on \"User\"."
        '404':
          description: "User not found."
    delete:
      tags:
        - auth
      summary: Logout
      description: Logout
      operationId: logout
      responses:
        '200':
          description: Logout successfully.
        '401':
          description: "Unauthorized."
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /auth/{email}:
    get:
      tags:
        - auth
      summary: Available
      description: Check email exist
      operationId: available
      parameters:
        - name: email
          in: path
          description: email
          required: true
          explode: true
          schema:
            type: string
            example: luclegen.dev@gmail.com
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: boolean
                default: true
        '203':
          description: failure operation
          content:
            application/json:
              schema:
                type: boolean
                default: false
        '400':
          description: "Invalid email."
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /codes:
    post:
      tags:
        - codes
      summary: Create code
      description: Create and send code
      operationId: createCode
      responses:
        '201':
          description: "136088|https://ethereal.email/message/ZRYnusTEJuGid-icZRYrbBRbZP9GSW-EAAAAB-45rzobJegWdBLDhEZaaAc"
        '404':
          description: "User not found."
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /folders:
    post:
      tags:
        - folders
      summary: Create folder
      description: Create a new folder
      operationId: createFolder
      requestBody:
        description: Create a new folder
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Folder'
        required: true
      responses:
        '201':
          description: "Done"
        '403':
          description: "Cannot execute \"read\" on \"Folder\".|Cannot execute \"create\" on \"Folder\"."
        '404':
          description: "Folder not found."
        '422':
          description: "You already have a directory in the current path.\nPlease change to another name."
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    get:
      tags:
        - folders
      summary: List folder
      description: List a folder
      operationId: listFolder
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                      example: "651f651c93bce2491f2d997f"
                    path:
                      type: string
                      example: "/"
                    name:
                      type: string
                      example: "New folder"
                    is_trash:
                      type: boolean
                      example: false
                    _uid:
                      type: string
                      example: "651a460623dbbafbf21fdb71"
                    createdAt:
                      type: string
                      example: "2023-10-04T08:36:52.960Z"
                    updatedAt:
                      type: string
                      example: "2023-10-04T09:10:54.326Z"
                    __v:
                      type: number
                      example: 0
        '403':
          description: "Cannot execute \"read\" on \"Folder\"."
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /folders/{id}:
    get:
      tags:
        - folders
      summary: Read folder
      description: Read a folder
      operationId: readFolder
      parameters:
        - name: id
          in: path
          description: Folder id
          required: true
          explode: true
          schema:
            type: string
            example: 651f651c93bce2491f2d997f
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatedFolder"
        '403':
          description: "Cannot execute \"read\" on \"Folder\"."
        '404':
          description: "Folder not found."
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    put:
      tags:
        - folders
      summary: Update folder
      description: Update folder
      operationId: updateFolder
      parameters:
        - name: id
          in: path
          description: Folder id
          required: true
          explode: true
          schema:
            type: string
            example: 651f651c93bce2491f2d997f
      requestBody:
        description: Folder
        content:
          text/plain:
            schema:
              type: string
              example: Test
      responses:
        '200':
          description: "Updated successfully."
        '400':
          description: "Invalid folder name."
        '403':
          description: "Name is required.|Cannot execute \"read\" on \"Folder\".|Cannot execute \"update\" on \"Folder\"."
        '404':
          description: "Folder not found.|Edited Folder not found."
        '422':
          description: "You already have a folder in the current path.\nPlease a different name."
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    patch:
      tags:
        - folders
      summary: Delete folder
      description: Delete a folder
      operationId: deleteFolder
      parameters:
        - name: id
          in: path
          description: Folder id
          required: true
          explode: true
          schema:
            type: string
            example: 651f651c93bce2491f2d997f
      responses:
        '200':
          description: "Deleted successfully."
        '403':
          description: "Cannot execute \"read\" on \"Folder\".|Cannot execute \"delete\" on \"Folder\"."
        '404':
          description: "Folder not found."
    delete:
      tags:
        - folders
      summary: Delete forever folder
      description: Delete forever a folder
      operationId: deleteForeverFolder
      parameters:
        - name: id
          in: path
          description: Folder id
          required: true
          explode: true
          schema:
            type: string
            example: 651f651c93bce2491f2d997f
      responses:
        '200':
          description: "Deleted forever successfully."
        '403':
          description: "Folder is not trash.|Cannot execute \"deleteForever\" on \"Folder\"."
        '404':
          description: "Folder not found."
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /folders/r/{id}:
    patch:
      tags:
        - folders
      summary: Restore folder
      description: Restore a folder
      operationId: restoreFolder
      parameters:
        - name: id
          in: path
          description: Folder id
          required: true
          explode: true
          schema:
            type: string
            example: 651f651c93bce2491f2d997f
      responses:
        '200':
          description: "Restored successfully."
        '403':
          description: "Cannot execute \"read\" on \"Folder\".|Cannot execute \"restore\" on \"Folder\"."
        '404':
          description: "Folder not found."
  /folders/m/{id}:
    patch:
      tags:
        - folders
      summary: Move folder
      description: Move a folder
      operationId: moveFolder
      parameters:
        - name: id
          in: path
          description: Folder id
          required: true
          explode: true
          schema:
            type: string
            example: 651f651c93bce2491f2d997f
      requestBody:
        description: Folder
        content:
          text/plain:
            schema:
              type: string
              example: 651f69f96081681ad25f851f
      responses:
        '200':
          description: "Moved successfully."
        '403':
          description: "Cannot execute \"read\" on \"Folder\".|Cannot execute \"move\" on \"Folder\"."
        '404':
          description: "Folder not found.|Moved folder not found."
        '422':
          description: "You already have a folder in the current path!\nPlease choose another folder."
  /folders/c/{id}:
    patch:
      tags:
        - folders
      summary: Copy folder
      description: Copy a folder
      operationId: copyFolder
      parameters:
        - name: id
          in: path
          description: Folder id
          required: true
          explode: true
          schema:
            type: string
            example: 651f651c93bce2491f2d997f
      requestBody:
        description: Folder
        content:
          text/plain:
            schema:
              type: string
              example: 651f69f96081681ad25f851f
      responses:
        '200':
          description: "Copied successfully."
        '403':
          description: "Cannot execute \"read\" on \"Folder\".|Cannot execute \"copy\" on \"Folder\"."
        '404':
          description: "Folder not found.|Copied folder not found."
        '422':
          description: "You already have a folder in the current path!\nPlease choose another folder."
  /files:
    post:
      tags:
        - files
      summary: Create file
      description: Create a new file
      operationId: createFile
      requestBody:
        description: A new file
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/File'
        required: true
      responses:
        '201':
          description: "Uploaded successfully."
        '400':
          description: "Name is required."
        '403':
          description: "Cannot execute \"read\" on \"File\".|Cannot execute \"create\" on \"File\"."
        '404':
          description: "File not found."
        '422':
          description: "File is duplicate.\nPlease choose another file."
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    get:
      tags:
        - files
      summary: List file
      description: List a file
      operationId: listFile
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                      example: "65237301a85163d860c9ce4d"
                    path:
                      type: string
                      example:  "/A/B/"
                    name:
                      type: string
                      example: "Test.ico"
                    is_trash:
                      type: boolean
                      example: false
                    _uid:
                      type: string
                      example: "651a460623dbbafbf21fdb71"
                    createdAt:
                      type: string
                      example: "2023-10-09T03:26:57.971Z"
                    updatedAt:
                      type: string
                      example: "2023-10-09T03:26:57.971Z"
                    __v:
                      type: number
                      example: 0
        '403':
          description: "Cannot execute \"list\" on \"File\"."
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /files/{id}:
    get:
      tags:
        - files
      summary: Read file
      description: Read a file
      operationId: readFile
      parameters:
        - name: id
          in: path
          description: File id
          required: true
          explode: true
          schema:
            type: string
            example: 65237301a85163d860c9ce4d
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatedFile"
        '403':
          description: "Cannot execute \"read\" on \"File\"."
        '404':
          description: "File not found."
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    put:
      tags:
        - files
      summary: Update file
      description: Update file
      operationId: updateFile
      parameters:
        - name: id
          in: path
          description: File id
          required: true
          explode: true
          schema:
            type: string
            example: 65237301a85163d860c9ce4d
      requestBody:
        description: File
        content:
          text/plain:
            schema:
              type: string
              example: Test.ico
      responses:
        '200':
          description: "Updated successfully."
        '400':
          description: "Name is required.|Invalid file name."
        '403':
          description: "Cannot execute \"read\" on \"File\".|Cannot execute \"update\" on \"File\"."
        '404':
          description: "File not found.|Edited File not found."
        '422':
          description: "You already have a file in the current path.\nPlease a different name."
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    patch:
      tags:
        - files
      summary: Delete file
      description: Delete a file
      operationId: deleteFile
      parameters:
        - name: id
          in: path
          description: File id
          required: true
          explode: true
          schema:
            type: string
            example: 65237301a85163d860c9ce4d
      responses:
        '200':
          description: "Deleted successfully."
        '403':
          description: "Cannot execute \"read\" on \"File\".|Cannot execute \"delete\" on \"File\"."
        '404':
          description: "File not found."
    delete:
      tags:
        - files
      summary: Delete forever file
      description: Delete forever a file
      operationId: deleteForeverFile
      parameters:
        - name: id
          in: path
          description: File id
          required: true
          explode: true
          schema:
            type: string
            example: 65237301a85163d860c9ce4d
      responses:
        '200':
          description: "Deleted forever successfully."
        '403':
          description: "File not in trash.|Cannot execute \"read\" on \"File\".|Cannot execute \"deleteForever\" on \"File\"."
        '404':
          description: "File not found.|Deleted file not found."
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /files/p:
    post:
      tags:
        - files
      summary: Create plaintext
      description: Create a new plaintext file
      operationId: createPlaintext
      requestBody:
        description: A new plaintext file
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaintextFile'
        required: true
      responses:
        '201':
          description: "Created successfully."
        '400':
          description: "Name is required.|Invalid plain text document file name."
        '403':
          description: "Cannot execute \"read\" on \"File\".|Cannot execute \"create\" on \"File\"."
        '404':
          description: "File not found."
        '422':
          description: "File is duplicate.\nPlease choose another file."
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /files/d/{id}:
    get:
      tags:
        - files
      summary: Download file
      description: Download a file
      operationId: downloadFile
      parameters:
        - name: id
          in: path
          description: File id
          required: true
          explode: true
          schema:
            type: string
            example: 65237301a85163d860c9ce4d
      responses:
        '200':
          description: "Downloaded successfully."
        '403':
          description: "Cannot execute \"read\" on \"File\".|Cannot execute \"download\" on \"File\"."
        '404':
          description: "File not found."
  /files/r/{id}:
    patch:
      tags:
        - files
      summary: Restore file
      description: Restore a file
      operationId: restoreFile
      parameters:
        - name: id
          in: path
          description: File id
          required: true
          explode: true
          schema:
            type: string
            example: 65237301a85163d860c9ce4d
      responses:
        '200':
          description: "Restored successfully."
        '403':
          description: "Cannot execute \"read\" on \"File\".|Cannot execute \"restore\" on \"File\"."
        '404':
          description: "File not found."
  /files/m/{id}:
    patch:
      tags:
        - files
      summary: Move file
      description: Move a file
      operationId: moveFile
      parameters:
        - name: id
          in: path
          description: File id
          required: true
          explode: true
          schema:
            type: string
            example: 65237301a85163d860c9ce4d
      requestBody:
        description: Folder
        content:
          text/plain:
            schema:
              type: string
              example: 651f69f96081681ad25f851f
      responses:
        '200':
          description: "Moved successfully."
        '403':
          description: "Cannot execute \"read\" on \"File\".|Cannot execute \"move\" on \"File\"."
        '404':
          description: "File not found.|Moved file not found."
        '422':
          description: "You already have a file in the current path!\nPlease choose another file."
  /files/c/{id}:
    patch:
      tags:
        - files
      summary: Copy file
      description: Copy a file
      operationId: copyFile
      parameters:
        - name: id
          in: path
          description: File id
          required: true
          explode: true
          schema:
            type: string
            example: 65237301a85163d860c9ce4d
      requestBody:
        description: File
        content:
          text/plain:
            schema:
              type: string
              example: 651f69f96081681ad25f851f
      responses:
        '200':
          description: "Copied successfully."
        '403':
          description: "Cannot execute \"read\" on \"File\".|Cannot execute \"copy\" on \"File\"."
        '404':
          description: "File not found.|Copied file not found."
        '422':
          description: "You already have a file in the current path!\nPlease choose another file."
  /public:
    get:
      tags:
        - public
      summary: List public files
      description: List public files
      operationId: listPublic
      parameters:
        - name: path
          in: query
          description: File id
          explode: true
          schema:
            type: string
            example: 651a460623dbbafbf21fdb71/1696582404909.jpg
      responses:
        '200':
          description: successful operation
          content:
            image/jpg:
              schema:
                type: string
                format: binary
        '204':
          description: List directory
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example:
                    "651a460623dbbafbf21fdb71"
        '501':
          description: "ENOENT: no such file or directory, open 'uploads/public/751a460623dbbafbf21fdb71/1696582404909.jpg'"
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /private:
    get:
      tags:
        - private
      summary: List private files
      description: List private files
      operationId: listPrivate
      parameters:
        - name: path
          in: query
          description: File id
          explode: true
          schema:
            type: string
            example: 651a460623dbbafbf21fdb71/files/A/B/Test.ico
      responses:
        '200':
          description: successful operation
          content:
            image/jpg:
              schema:
                type: string
                format: binary
        '204':
          description: List directory
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example:
                    "651a460623dbbafbf21fdb71"
        '501':
          description: "ENOENT: no such file or directory, open 'uploads/private/751a460623dbbafbf21fdb71/files/A/B/Test.ico'"
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/findByStatus:
    get:
      tags:
        - pet
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - available
              - pending
              - sold
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/findByTags:
    get:
      tags:
        - pet
      summary: Finds Pets by tags
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findPetsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid tag value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/{petId}:
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - api_key: []
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - pet
      summary: Updates a pet in the store with form data
      description: ''
      operationId: updatePetWithForm
      parameters:
        - name: petId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of pet that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of pet that needs to be updated
          schema:
            type: string
      responses:
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    delete:
      tags:
        - pet
      summary: Deletes a pet
      description: delete a pet
      operationId: deletePet
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: petId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid pet value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/{petId}/uploadImage:
    post:
      tags:
        - pet
      description: ''
      operationId: uploadFile
      parameters:
        - name: petId
          in: path
          description: ID of pet to update
          required: true
          schema:
            type: integer
            format: int64
        - name: additionalMetadata
          in: query
          description: Additional Metadata
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /store/inventory:
    get:
      tags:
        - store
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a pet
      description: Place a new order in the store
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '405':
          description: Invalid input
  /store/order/{orderId}:
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    Auth:
      type: object
      properties:
        email:
          type: string
          example: luclegen.dev@gmail.com
        password:
          type: string
          example: Luc123!@#
        remember:
          type: boolean
          example: false
        language:
          type: string
          enum:
            - en
            - vi
          example: en|vi
    User:
      type: object
      properties:
        first_name:
          type: string
          example: Luc
        last_name:
          type: string
          example: Tan Huynh
        email:
          type: string
          example: luclegen.dev@gmail.com
        password:
          type: string
          example: Luc123!@#
        day:
          type: integer
          example: 29
        month:
          type: integer
          example: 9
        year:
          type: integer
          example: 1997
        sex:
          type: string
          enum:
            - Male
            - Female
            - Other
          default: Male
        lang:
          type: string
          enum:
            - en
            - vi
          example: en|vi
      xml:
        name: user
    UpdatedUser:
      type: object
      properties:
        avatar:
          type: string
          format: binary
        first_name:
          type: string
          example: Liên
        middle_name:
          type: string
          example: Thị Cẩm
        last_name:
          type: string
          example: Huỳnh
        lang:
          type: string
          enum:
            - en
            - vi
          default: en
          example: en
        full_name:
          type: string
          example: Huỳnh Thị Cẩm Liên
        day:
          type: integer
          example: 16
        month:
          type: integer
          example: 2
        year:
          type: integer
          example: 1990
        sex:
          type: string
          enum:
            - Male
            - Female
            - Other
          default: Female
      xml:
        name: user
    Lang:
      type: string
      enum:
        - en
        - vi
      example: en|vi
    Folder:
      type: object
      properties:
        path:
          type: string
          example: /
        name:
          type: string
          example: New folder
    File:
      type: object
      properties:
        file:
          type: string
          format: binary
        name:
          type: string
          example: Test
        path:
          type: string
          example: "/"
    PlaintextFile:
      type: object
      properties:
        name:
          type: string
          example: Test.txt
        path:
          type: string
          example: "/"
    CreatedFolder:
      type: object
      properties:
        _id: 
          type: string
          example: "651f651c93bce2491f2d997f"
        path:
          type: string
          example: "/"
        name:
          type: string
          example: "Test"
        is_trash:
          type: boolean
          example: false
        _uid:
          type: string
          example: "651a460623dbbafbf21fdb71"
        createdAt:
          type: string
          example: "2023-10-06T01:38:36.551Z"
        updatedAt:
          type: string
          example: "2023-10-06T01:38:36.551Z"
        __v:
          type: number
          example: 0
    CreatedFile:
      type: object
      properties:
        _id:
          type: string
          example: "65237301a85163d860c9ce4d"
        path:
          type: string
          example: "/"
        name:
          type: string
          example: "Test.ico"
        is_trash:
          type: boolean
          example: false
        _uid:
          type: string
          example: "651a460623dbbafbf21fdb71"
        createdAt:
          type: string
          example: "2023-10-08T08:15:33.282Z"
        updatedAt:
          type: string
          example: "2023-10-08T08:15:33.282Z"
        __v:
          type: integer
          example: 0
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header